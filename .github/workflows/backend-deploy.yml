name: Deploy Backend Application to EC2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'
  APPLICATION_NAME: 'tokenization-backend'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      war-name: ${{ steps.build.outputs.war-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      id: build
      run: |
        mvn clean compile -DskipTests -q
        mvn package -DskipTests
        WAR_NAME=$(ls target/*.war | xargs basename)
        echo "war-name=$WAR_NAME" >> $GITHUB_OUTPUT
        echo "Built WAR file: $WAR_NAME"
        
    - name: Upload WAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APPLICATION_NAME }}-${{ github.sha }}
        path: target/*.war
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Download WAR artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.APPLICATION_NAME }}-${{ github.sha }}
        path: ./artifacts
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Get RDS endpoint from Secrets Manager
      id: get-db-config
      run: |
        DB_CONFIG=$(aws secretsmanager get-secret-value --secret-id sabpaisa-tokenization-${{ github.event.inputs.environment }}-db-config --query SecretString --output text)
        echo "DB_HOST=$(echo $DB_CONFIG | jq -r .host)" >> $GITHUB_OUTPUT
        echo "DB_NAME=$(echo $DB_CONFIG | jq -r .database)" >> $GITHUB_OUTPUT
        
    - name: Get JWT secret
      id: get-jwt-secret
      run: |
        JWT_SECRET=$(aws secretsmanager get-secret-value --secret-id sabpaisa-tokenization-${{ github.event.inputs.environment }}-jwt-secret --query SecretString --output text)
        echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_OUTPUT
        
    - name: Deploy to EC2
      run: |
        # Get EC2 instance ID
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=sabpaisa-backend-${{ github.event.inputs.environment }}" \
                   "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
          echo "EC2 instance not found for environment: ${{ github.event.inputs.environment }}"
          exit 1
        fi
        
        echo "Deploying to EC2 instance: $INSTANCE_ID"
        
        # Upload WAR file to S3 for EC2 to download
        aws s3 cp ./artifacts/${{ needs.build.outputs.war-name }} \
          s3://sabpaisa-artifacts/${{ env.APPLICATION_NAME }}/${{ github.event.inputs.environment }}/
        
        # Create deployment script
        cat > deploy-script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Configuration
        APP_NAME="${{ env.APPLICATION_NAME }}"
        WAR_NAME="${{ needs.build.outputs.war-name }}"
        TOMCAT_HOME="/opt/tomcat"
        WEBAPPS_DIR="$TOMCAT_HOME/webapps"
        S3_BUCKET="sabpaisa-artifacts"
        
        # Database configuration
        DB_HOST="${{ steps.get-db-config.outputs.DB_HOST }}"
        DB_NAME="${{ steps.get-db-config.outputs.DB_NAME }}"
        DB_USER="postgres"
        JWT_SECRET="${{ steps.get-jwt-secret.outputs.JWT_SECRET }}"
        
        echo "Starting deployment of $APP_NAME..."
        
        # Download WAR from S3
        echo "Downloading WAR file from S3..."
        aws s3 cp "s3://$S3_BUCKET/$APP_NAME/${{ github.event.inputs.environment }}/$WAR_NAME" "/tmp/$WAR_NAME"
        
        # Stop Tomcat
        echo "Stopping Tomcat..."
        sudo systemctl stop tomcat || true
        
        # Remove old deployment
        echo "Removing old deployment..."
        sudo rm -rf "$WEBAPPS_DIR/$APP_NAME"*
        
        # Deploy new WAR
        echo "Deploying new WAR..."
        sudo cp "/tmp/$WAR_NAME" "$WEBAPPS_DIR/$APP_NAME.war"
        sudo chown tomcat:tomcat "$WEBAPPS_DIR/$APP_NAME.war"
        
        # Update application properties
        echo "Updating application configuration..."
        sudo mkdir -p /opt/tomcat/conf
        cat > /tmp/application.yml << EOL
        spring:
          application:
            name: tokenization-service
          datasource:
            url: jdbc:postgresql://$DB_HOST:5432/$DB_NAME
            username: $DB_USER
            password: \${DATABASE_PASSWORD}
            driver-class-name: org.postgresql.Driver
          jpa:
            hibernate:
              ddl-auto: validate
            properties:
              hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                format_sql: true
            show-sql: false
          redis:
            host: localhost
            port: 6379
            timeout: 10s
          security:
            jwt:
              secret-key: $JWT_SECRET
              expiration: 86400000
        
        server:
          port: 8080
          servlet:
            context-path: /$APP_NAME
          error:
            include-message: always
            include-binding-errors: always
        
        springdoc:
          api-docs:
            path: /v3/api-docs
          swagger-ui:
            path: /swagger-ui.html
            enabled: true
        
        logging:
          level:
            com.sabpaisa.tokenization: INFO
            org.springframework.web: WARN
            org.hibernate: WARN
          file:
            name: /opt/tomcat/logs/$APP_NAME.log
        
        # Application specific properties
        app:
          encryption:
            enabled: true
            exclude-paths: /health,/actuator/**,/swagger-ui/**,/v3/api-docs/**
          notification:
            enabled: true
            from-email: noreply@sabpaisa.com
          sms:
            provider: mock
            sender-id: SBPAIS
          monetization:
            enabled: true
            free-tier-tokens: 1000
          scheduling:
            enabled: true
        EOL
        
        sudo mv /tmp/application.yml /opt/tomcat/conf/application.yml
        sudo chown tomcat:tomcat /opt/tomcat/conf/application.yml
        
        # Set database password from Secrets Manager
        DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id sabpaisa-tokenization-${{ github.event.inputs.environment }}-db-config --query SecretString --output text | jq -r .password)
        
        # Update Tomcat environment with database password
        sudo mkdir -p /opt/tomcat/bin
        echo "export DATABASE_PASSWORD=\"$DB_PASSWORD\"" | sudo tee /opt/tomcat/bin/setenv.sh
        echo "export SPRING_CONFIG_LOCATION=\"/opt/tomcat/conf/application.yml\"" | sudo tee -a /opt/tomcat/bin/setenv.sh
        sudo chmod +x /opt/tomcat/bin/setenv.sh
        sudo chown tomcat:tomcat /opt/tomcat/bin/setenv.sh
        
        # Start Tomcat
        echo "Starting Tomcat..."
        sudo systemctl start tomcat
        sudo systemctl enable tomcat
        
        # Wait for application to start
        echo "Waiting for application to start..."
        sleep 30
        
        # Health check
        echo "Performing health check..."
        for i in {1..10}; do
          if curl -f -s "http://localhost:8080/$APP_NAME/actuator/health" > /dev/null 2>&1; then
            echo "Application is healthy!"
            break
          elif [ $i -eq 10 ]; then
            echo "Health check failed after 10 attempts"
            sudo systemctl status tomcat
            sudo tail -50 /opt/tomcat/logs/catalina.out
            sudo tail -50 /opt/tomcat/logs/$APP_NAME.log || true
            exit 1
          else
            echo "Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        echo "Deployment completed successfully!"
        EOF
        
        # Execute deployment script on EC2
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cat > /tmp/deploy.sh << '"'"'DEPLOY_SCRIPT_EOF'"'"'
        $(cat deploy-script.sh)
        DEPLOY_SCRIPT_EOF
        chmod +x /tmp/deploy.sh && /tmp/deploy.sh"]' \
          --timeout-seconds 600 \
          --region ap-south-1
        
        # Wait for command execution
        sleep 10
        
        echo "Backend deployment completed for environment: ${{ github.event.inputs.environment }}"
        
  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Backend deployment successful for environment: ${{ github.event.inputs.environment }}"
          echo "🎉 Application URL: http://$(aws ec2 describe-instances --instance-ids $(aws ec2 describe-instances --filters "Name=tag:Name,Values=sabpaisa-tokenization-backend-${{ github.event.inputs.environment }}" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].InstanceId" --output text) --query "Reservations[0].Instances[0].PublicDnsName" --output text):8080/${{ env.APPLICATION_NAME }}"
        else
          echo "❌ Backend deployment failed for environment: ${{ github.event.inputs.environment }}"
          exit 1
        fi